name: PostgreSQL MCP Server Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: mcp_test_db
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    strategy:
      matrix:
        python-version: ['3.10', '3.11']

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install uv
      run: |
        pip install uv

    - name: Install dependencies with uv
      run: |
        uv pip install -e .
        uv pip install -e ".[dev]"

    - name: Wait for PostgreSQL
      run: |
        for i in {1..30}; do
          if pg_isready -h localhost -p 5432 -U test_user; then
            echo "PostgreSQL is ready!"
            break
          fi
          echo "Waiting for PostgreSQL... ($i/30)"
          sleep 2
        done
        pg_isready -h localhost -p 5432 -U test_user || echo "PostgreSQL failed to start"

    - name: Initialize test database
      run: |
        PGPASSWORD=test_password psql -h localhost -p 5432 -U test_user -d mcp_test_db -f test/docker/init-test-db.sql

    - name: Run unit tests
      run: |
        uv run python -m pytest test/unit/ -v --tb=short --cov=src --cov-report=term-missing

    - name: Run integration tests
      env:
        POSTGRES_HOST: localhost
        POSTGRES_PORT: 5432
        POSTGRES_DB: mcp_test_db
        POSTGRES_USER: test_user
        POSTGRES_PASSWORD: test_password
        POSTGRES_SSL_MODE: disable
        RUN_INTEGRATION_TESTS: 1
      run: |
        uv run python -m pytest test/integration/ -v --tb=short -m integration

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  docker-test:
    name: Docker Integration Tests
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Run Docker tests
      run: |
        cd test/docker
        docker-compose -f docker-compose.test.yml up --build -d
        sleep 10
        docker-compose -f docker-compose.test.yml run --rm test-runner
        docker-compose -f docker-compose.test.yml down

  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install uv
      run: |
        pip install uv

    - name: Install development dependencies with uv
      run: |
        uv pip install black>=23.0.0 flake8>=6.0.0 mypy>=1.0.0

    - name: Check code formatting with Black
      run: |
        uv run black --check src/ test/

    - name: Lint with flake8
      run: |
        uv run flake8 src/ test/ --count --select=E9,F63,F7,F82 --show-source --statistics
        uv run flake8 src/ test/ --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics

    - name: Type check with mypy
      run: |
        uv run mypy src/ --ignore-missing-imports

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Bandit security scan
      uses: py-actions/bandit@v3.1.1
      with:
        targets: src/
        args: "-r -f json -o bandit-report.json"

    - name: Upload Bandit report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: bandit-report
        path: bandit-report.json
        retention-days: 30

  build-docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [test, docker-test, code-quality]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      run: |
        docker build -t mcp-postgres:latest -f test/docker/Dockerfile.test .

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Push Docker image
      run: |
        docker tag mcp-postgres:latest ${{ secrets.DOCKERHUB_USERNAME }}/mcp-postgres:latest
        docker push ${{ secrets.DOCKERHUB_USERNAME }}/mcp-postgres:latest
